{"version":3,"sources":["utils/utility.tsx","shared/components/Spinner.tsx","config/route/RoutesConfig.tsx","config/route/PublicRoutes.tsx","layout/header/Header.tsx","layout/footer/Footer.tsx","layout/Layout.tsx","config/route/RouteLoader.tsx","App.tsx","reportWebVitals.ts","store/types/exampleTypes.ts","shared/services/fetchSendRequestService.ts","store/sagas/apiCallSaga.ts","shared/constants/urls.ts","store/actions/exampleAction.ts","store/reducer/exampleReducer.ts","store/index.ts","index.tsx","config/configureStore.ts"],"names":["updateAction","type","payload","checkIsSSo","paths","window","location","pathname","split","length","Spinner","height","className","style","RoutesConfig","publicRoutes","path","isPublic","component","lazy","PublicRoutes","map","exact","to","Header","role","src","width","id","Footer","href","Layout","children","RouteLoader","Fragment","basename","fallback","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","EXAMPLE_ACTION_TYPES","GET_API_CALL","GET_API_DATA","POST_API_CALL","POST_API_DATA","FetchSendRequest","countStartApi","countEndApi","_instance","Error","this","requestJSON","a","requestBody","isLoader","body","fetch","url","method","headers","Headers","AccessToken","Accept","JSON","stringify","response","json","promise","getAPICallSagaExample","postAPICallSagaExample","watchApiCallSagaExample","sendRequest","instance","MakeAPICall","put","actionTypes","postResponseData","console","error","takeLatest","initialState","fakeDataList","exampleReducer","state","action","rootSaga","all","fork","apiCallSaga","store","sagaMiddleware","createSagaMiddleware","createStore","combineReducers","homeData","applyMiddleware","run","configureStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3c731a28.chunk.js","sourcesContent":["import { ReactNode } from 'react';\r\n\r\nexport function updateObject<I, P>(oldObject: I, updatedProperties: P): I {\r\n  return {\r\n    ...oldObject,\r\n    ...updatedProperties,\r\n  };\r\n}\r\n\r\nexport function updateAction<T>(type: string, payload?: T): { type: string, payload?: T } {\r\n  return { type, payload };\r\n}\r\n\r\nexport const checkValidity = (value: string, rules: any): boolean => {\r\n  let isValid = true;\r\n  if (!rules) {\r\n    return true;\r\n  }\r\n\r\n  if (rules.required) {\r\n    isValid = value.trim() !== '' && isValid;\r\n  }\r\n\r\n  if (rules.minLength) {\r\n    isValid = value.length >= rules.minLength && isValid;\r\n  }\r\n\r\n  if (rules.maxLength) {\r\n    isValid = value.length <= rules.maxLength && isValid;\r\n  }\r\n\r\n  if (rules.isEmail) {\r\n    const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n    isValid = pattern.test(value) && isValid;\r\n  }\r\n\r\n  if (rules.isNumeric) {\r\n    const pattern = /^\\d+$/;\r\n    isValid = pattern.test(value) && isValid;\r\n  }\r\n  return isValid;\r\n};\r\n\r\nexport const propertyBasedSort = (a: any, b: any): number => {\r\n  const aDate: Date = new Date(a.start);\r\n  const bDate: Date = new Date(b.start);\r\n  if (aDate < bDate) {\r\n    return -1;\r\n  }\r\n  if (aDate > bDate) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n};\r\n\r\nexport const success = (msg: ReactNode | string): void => {\r\n  // message.success(msg);\r\n};\r\nexport const error = (msg: ReactNode | string): void => {\r\n  // message.error(msg);\r\n};\r\nexport const warning = (msg: ReactNode | string): void => {\r\n  // message.warning(msg);\r\n};\r\n\r\nexport const capitalizeFirstLetter = (str: string): string => {\r\n  return str?.charAt(0)?.toUpperCase() + str?.slice(1);\r\n};\r\n\r\nexport const base64Encode = (unencoded: string): string => {\r\n  return btoa(unencoded);\r\n};\r\n\r\nexport const base64Decode = (encoded: string): string => {\r\n  return atob(encoded);\r\n};\r\n\r\nexport const base64UrlEncode = (unencoded: string): string => {\r\n  const encoded = base64Encode(unencoded);\r\n  return encodeURIComponent(encoded);\r\n};\r\n\r\nexport const base64UrlDecode = (encoded: string): string => {\r\n  encoded = decodeURIComponent(encoded);\r\n  return base64Decode(encoded);\r\n};\r\n\r\nexport const extractSecondLevelBaseUrl = (path: string): string => {\r\n  const routePath = path.split('/');\r\n  routePath.length = 3;\r\n  return routePath.join('/');\r\n};\r\n\r\nexport const getDobFromAge = (age: number): Date => {\r\n  const d = new Date();\r\n  const curYear = d.getFullYear();\r\n  return new Date(d.setFullYear(curYear - age));\r\n};\r\n\r\nexport const array_move = (arr: any[], old_index: number, new_index: number): any[] => {\r\n  if (new_index >= arr.length) {\r\n    let k = new_index - arr.length + 1;\r\n    while (k--) {\r\n      arr.push(undefined);\r\n    }\r\n  }\r\n  arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\r\n  return arr;\r\n};\r\n\r\nexport const calculateFinalPrice = (price: number, discountPercent: number): number => {\r\n  discountPercent = discountPercent < 0 || discountPercent === undefined ? 0 : discountPercent > 100 ? 100 : discountPercent;\r\n  price = price === undefined ? 0 : price;\r\n  return Math.round((price - ((discountPercent / 100) * price)) || 0);\r\n};\r\n\r\nexport const calculateDiscountPercentage = (price: number, discountedPrice: number): number => {\r\n  price = price < 0 || price === undefined ? 0 : price;\r\n  discountedPrice = discountedPrice === undefined ? 0 : discountedPrice;\r\n  return Math.round(((price - discountedPrice) / price) * 100 || 0);\r\n};\r\n\r\nexport const getMobileFormat = (mobile: string): string => {\r\n  if (mobile && typeof mobile === 'string') {\r\n    mobile = mobile.toString();\r\n    return `+91 ${mobile.substr(0, 3)} ${mobile.substr(3, 4)} ${mobile.substr(7, 3)}`;\r\n  }\r\n  return '';\r\n};\r\n\r\nexport const formatPrice = (price: number, isDecimalRequired: boolean = true, isRSRequried: boolean = true): string => {\r\n  if (isDecimalRequired && isRSRequried) {\r\n    return 'Rs. ' + (price || 0).toFixed(2).replace(/(\\d)(?=(\\d{2})+\\d\\.)/g, '$1,');\r\n  } else if (isDecimalRequired && !isRSRequried) {\r\n    return (price || 0).toFixed(2).replace(/(\\d)(?=(\\d{2})+\\d\\.)/g, '$1,');\r\n  } else if (!isDecimalRequired && isRSRequried) {\r\n    return 'Rs. ' + (price || 0).toString().replace(/\\B(?=(?:(\\d\\d)+(\\d)(?!\\d))+(?!\\d))/g, ',');\r\n  } else if (!isDecimalRequired && !isRSRequried) {\r\n    return (price || 0).toString().replace(/\\B(?=(?:(\\d\\d)+(\\d)(?!\\d))+(?!\\d))/g, ',');\r\n  } else {\r\n    return 'Rs. ' + (price || 0).toString().replace(/\\B(?=(?:(\\d\\d)+(\\d)(?!\\d))+(?!\\d))/g, ',');\r\n  }\r\n};\r\n\r\nexport const getPercentage = (total: number, value: number): number => {\r\n  return (total && value) ? Math.round((value / total) * 100) : 0;\r\n};\r\n\r\nexport const mobileFormat = (mobileNumber: string): string => {\r\n  return mobileNumber.substr(4).split(' ').join('');\r\n};\r\n\r\nexport const toCamelCase = (string: string): string => {\r\n  return string\r\n    .replace(/\\s(.)/g, ($1: any): any => $1.toUpperCase())\r\n    .replace(/\\s/g, ' ')\r\n    .replace(/^(.)/, ($1: any): any => $1.toUpperCase());\r\n};\r\n\r\nexport const checkIsSSo = (): boolean => {\r\n  const paths = window?.location?.pathname?.split('/');\r\n  if (paths && paths.length && paths[1] === 'sl') {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const average = (arr: number[]): number => arr.reduce((p: number, c: number): number => p + c, 0) / arr.length;\r\n\r\nexport const getBulletPoints = (values: string[]): string => {\r\n  if (values) {\r\n    let result = `<ul style=\"width: 100%; padding-inline-start: 15px; margin-bottom: 0;\">`;\r\n    values.forEach((x: string): void => {\r\n      result += '<li>' + x + '</li>';\r\n    });\r\n    result = result + '</ul>';\r\n    return result;\r\n  }\r\n  return '';\r\n};\r\n","import { ReactElement } from 'react';\r\nimport { SpinnerModels } from '../models/commonModels';\r\n\r\nconst Spinner = ({ height }: SpinnerModels): ReactElement => {\r\n  return (\r\n    <div className=\"fallback-loader\" style={{ height: height || '100vh' }}>\r\n      <h1>Here, set loader icon...</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import { lazy } from \"react\";\r\nimport { RouteType } from \"src/shared/models/routeModels\";\r\n\r\nconst RoutesConfig: RouteType = {\r\n  publicRoutes: [\r\n    {\r\n      path: \"/login\",\r\n      isPublic: true,\r\n      component: lazy((): any => import(\"src/modules/login/Login\")),\r\n    },\r\n    {\r\n      path: \"/\",\r\n      isPublic: true,\r\n      component: lazy((): any => import(\"src/modules/home/Home\")),\r\n    },\r\n    {\r\n      path: \"/corona\",\r\n      isPublic: true,\r\n      component: lazy((): any => import(\"src/modules/Corona/Corona\")),\r\n    },\r\n    {\r\n      path: \"/faq\",\r\n      isPublic: true,\r\n      component: lazy((): any => import(\"src/modules/faq/Faq\")),\r\n    },\r\n    {\r\n      path: \"/impfstoffe\",\r\n      isPublic: true,\r\n      component: lazy((): any => import(\"src/modules/Impfstoffe/Impfstoff\")),\r\n    },\r\n    {\r\n      path: \"/contact\",\r\n      isPublic: true,\r\n      component: lazy((): any => import(\"src/modules/Kontakt/Kontakt\")),\r\n    },\r\n    {\r\n      path: \"/ueber\",\r\n      isPublic: true,\r\n      component: lazy((): any => import(\"src/modules/ÜberUns/Ueber\")),\r\n    },\r\n    {\r\n      path: \"/terminvergabe\",\r\n      isPublic: true,\r\n      component: lazy(\r\n        (): any => import(\"src/modules/Terminvergabe/Terminvergabe\")\r\n      ),\r\n    },\r\n    {\r\n      path: \"*\",\r\n      isPublic: false,\r\n      component: lazy(\r\n        (): any => import(\"src/shared/components/NotFoundComponent\")\r\n      ),\r\n    },\r\n  ],\r\n};\r\nexport default RoutesConfig;\r\n","import { ReactElement } from 'react';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport { RouteConfig } from 'src/shared/models/routeModels';\r\nimport RoutesConfig from './RoutesConfig';\r\n\r\nconst PublicRoutes = (): ReactElement => {\r\n  return (\r\n    <Switch>\r\n      {\r\n        RoutesConfig.publicRoutes.map(({ path, component }: RouteConfig): ReactElement => {\r\n          return (\r\n            <Route\r\n              exact={true}\r\n              key={path}\r\n              path={path}\r\n              component={component}\r\n            />\r\n          );\r\n        },\r\n        )\r\n      }\r\n      <Route path=\"*\" ><Redirect to=\"/\" /></Route>\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default PublicRoutes;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\r\n      <div className=\"navbar-brand\">\r\n        <Link className=\"navbar-item\" to=\"/\">\r\n          <img src=\"assets/images/logoM.jpeg\" width=\"150\" height=\"200\" />\r\n        </Link>\r\n        <a\r\n          role=\"button\"\r\n          className=\"navbar-burger\"\r\n          aria-label=\"menu\"\r\n          aria-expanded=\"false\"\r\n          data-target=\"navbarBasicExample\"\r\n        >\r\n          <span aria-hidden=\"true\"></span>\r\n          <span aria-hidden=\"true\"></span>\r\n          <span aria-hidden=\"true\"></span>\r\n        </a>\r\n      </div>\r\n\r\n      <div id=\"navbarBasicExample\" className=\"navbar-menu\">\r\n        <div className=\"navbar-start\">\r\n          <Link className=\"navbar-item\" to=\"/\">\r\n            Home\r\n          </Link>\r\n\r\n          <Link className=\"navbar-item\" to=\"/terminvergabe\">\r\n            Terminvergabe\r\n          </Link>\r\n\r\n          <Link className=\"navbar-item\" to=\"/ueber\">\r\n            Über Uns\r\n          </Link>\r\n\r\n          <Link className=\"navbar-item\" to=\"/corona\">\r\n            aktuelle Infos\r\n          </Link>\r\n\r\n          <Link className=\"navbar-item\" to=\"impfstoffe\">\r\n            Impfstoffe\r\n          </Link>\r\n\r\n          <Link className=\"navbar-item\" to=\"/faq\">\r\n            FAQ\r\n          </Link>\r\n\r\n          <Link className=\"navbar-item\" to=\"/contact\">\r\n            Kontakt\r\n          </Link>\r\n        </div>\r\n\r\n        <div className=\"navbar-end\">\r\n          <div className=\"navbar-item\">\r\n            <div className=\"buttons\">\r\n              <a className=\"button is-primary\">\r\n                <strong>Sign up</strong>\r\n              </a>\r\n              <a className=\"button is-light\">Log in</a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","//import styles from './footer.module.css';\n//import cn from 'classnames'\n\nconst Footer = () => {\n  return (\n    <footer className=\"footer\">\n      <div className={\"content has-text-centered\"}>\n        <p>\n          <strong>Impzentrum St.Laurent</strong> by{\" \"}\n          <a href=\"https://www.linkedin.com/in/najima-jaadari-056293148/\">\n            Najima Jaadari{\" \"}\n          </a>\n        </p>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import { RouteConfig } from 'src/shared/models/routeModels';\r\nimport { ReactElement } from 'react';\r\nimport Header from './header/Header';\r\nimport Footer from './footer/Footer';\r\n\r\n\r\nconst Layout = ({ children }: RouteConfig): ReactElement => {\r\n  return (\r\n    <section className=\"main-container\">\r\n      <Header />\r\n      {children}\r\n      <Footer/>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import React, { ReactElement, Suspense } from 'react';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport PublicRoutes from './PublicRoutes';\r\nimport Spinner from 'src/shared/components/Spinner';\r\nimport Layout from 'src/layout/Layout';\r\n\r\nconst RouteLoader = (): ReactElement | null => {\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Router basename=\"/\">\r\n        <Suspense fallback={<Spinner />}>\r\n          {/* {isAccessToken ? \r\n           <Layout>\r\n           <PublicRoutes />\r\n           </Layout>\r\n           :\r\n           <PublicRoutes />\r\n          } */}\r\n          \r\n          <Layout>\r\n          <PublicRoutes />\r\n          </Layout>\r\n        </Suspense>\r\n      </Router>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default RouteLoader;\r\n","import './App.css';\nimport RouteLoader from './config/route/RouteLoader';\n\nconst App = () => <RouteLoader />;\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const EXAMPLE_ACTION_TYPES = {\r\n  GET_API_CALL: 'GET_API_CALL',\r\n  GET_API_DATA: 'GET_API_DATA',\r\n  POST_API_CALL: 'POST_API_CALL',\r\n  POST_API_DATA: 'POST_API_DATA'\r\n};\r\n\r\nexport default EXAMPLE_ACTION_TYPES;\r\n","import { RequestApi } from \"../models/apiModels\";\r\n\r\nclass FetchSendRequest {\r\n  private static _instance: FetchSendRequest = new FetchSendRequest();\r\n  // private appDetail: ApplicationDetail = ApplicationDetail.instance;\r\n  countStartApi = 0;\r\n  countEndApi = 0;\r\n\r\n  constructor() {\r\n    if (FetchSendRequest._instance) {\r\n      throw new Error(\"Use DataService.instance\");\r\n    }\r\n    FetchSendRequest._instance = this;\r\n  }\r\n\r\n  static get instance(): FetchSendRequest {\r\n    return FetchSendRequest._instance;\r\n  }\r\n\r\n  async MakeAPICall(requestJSON: RequestApi) {\r\n    let requestBody = {};\r\n\r\n    if (requestJSON && requestJSON.isLoader !== false) {\r\n      this.countStartApi += 1;\r\n      // store.dispatch({ type: 'REQUEST', status: 'REQUESTED' });\r\n    }\r\n\r\n    if (requestJSON && requestJSON.body) {\r\n      requestBody = requestJSON.body;\r\n    }\r\n\r\n    const promise = await fetch(requestJSON.url, {\r\n      method: requestJSON.method\r\n        ? requestJSON.method\r\n        : requestJSON.body\r\n        ? \"POST\"\r\n        : \"GET\",\r\n      headers: new Headers({\r\n        AccessToken: \"\", //cookies.get('access_token'),\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      }),\r\n      body: requestJSON.body ? JSON.stringify(requestBody) : null,\r\n    }).then((response) => response.json());\r\n    if (promise) {\r\n      if (requestJSON && requestJSON.isLoader !== false) {\r\n        this.countEndApi += 1;\r\n        if (this.countStartApi === this.countEndApi) {\r\n          // store.dispatch({ type: 'REQUEST', status: 'REQUEST_FULFILLED' });\r\n        }\r\n      }\r\n    }\r\n    return promise;\r\n  }\r\n}\r\nexport default FetchSendRequest;\r\n","import { takeLatest, put } from \"redux-saga/effects\";\r\nimport {\r\n  GET_JSON_PLACEHOLDER_URL,\r\n  POST_JSON_PLACEHOLDER_URL,\r\n} from \"src/shared/constants/urls\";\r\nimport {\r\n  fetchGetApiDataExample,\r\n  fetchPostApiDataExample,\r\n} from \"../actions/exampleAction\";\r\nimport FetchSendRequest from \"src/shared/services/fetchSendRequestService\";\r\nimport actionTypes from \"../types/exampleTypes\";\r\n\r\nconst sendRequest = FetchSendRequest.instance;\r\n\r\nfunction* getAPICallSagaExample(): any {\r\n  const response: any = yield sendRequest.MakeAPICall({\r\n    url: GET_JSON_PLACEHOLDER_URL,\r\n  });\r\n  if (response) {\r\n    yield put(fetchGetApiDataExample(response));\r\n  }\r\n}\r\n\r\nfunction* postAPICallSagaExample({ payload }: any): Generator {\r\n  try {\r\n    const response: any = yield sendRequest.MakeAPICall({\r\n      url: POST_JSON_PLACEHOLDER_URL,\r\n      body: payload,\r\n    });\r\n    if (response) {\r\n      yield put(fetchPostApiDataExample(response));\r\n    }\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n}\r\n\r\nexport function* watchApiCallSagaExample(): any {\r\n  yield takeLatest(actionTypes.GET_API_CALL, getAPICallSagaExample);\r\n  yield takeLatest(actionTypes.POST_API_CALL, postAPICallSagaExample);\r\n}\r\n\r\nexport default watchApiCallSagaExample;\r\n","export const GET_JSON_PLACEHOLDER_URL = 'https://jsonplaceholder.typicode.com/todos';\r\nexport const POST_JSON_PLACEHOLDER_URL = 'https://jsonplaceholder.typicode.com/posts';","import {\r\n  Action,\r\n  GetFakeDataList,\r\n  PostFakeDataObject,\r\n} from \"src/store/models/actionModel\";\r\nimport { updateAction } from \"src/utils/utility\";\r\nimport actionTypes from \"src/store/types/exampleTypes\";\r\n\r\nexport const fetchGetApiCallExample = (): Action<GetFakeDataList> => {\r\n  return updateAction(actionTypes.GET_API_CALL);\r\n};\r\n\r\nexport const fetchGetApiDataExample = (\r\n  payload: GetFakeDataList\r\n): Action<GetFakeDataList> => {\r\n  return updateAction(actionTypes.GET_API_DATA, payload);\r\n};\r\n\r\nexport const fetchPostApiCallExample = (\r\n  requestJSON: PostFakeDataObject\r\n): Action<PostFakeDataObject> => {\r\n  return updateAction(actionTypes.POST_API_CALL, requestJSON);\r\n};\r\n\r\nexport const fetchPostApiDataExample = (\r\n  postResponseData: PostFakeDataObject\r\n): Action<PostFakeDataObject> => {\r\n  return updateAction(actionTypes.POST_API_DATA, postResponseData);\r\n};\r\n","import { AnyAction, Reducer } from 'redux';\r\nimport actionTypes from '../types/exampleTypes';\r\n// import { updateObject } from '../../utils/utility';\r\n\r\nconst initialState = {\r\n  fakeDataList: [],\r\n  postResponseData: {}\r\n};\r\n\r\nconst exampleReducer: Reducer<any> = (state: any = initialState, action: AnyAction): any | any => {\r\n\r\n  switch (action.type) {\r\n    case actionTypes.GET_API_DATA: return {\r\n      ...state,\r\n      fakeDataList: action.payload,\r\n    };\r\n    // case actionTypes.POST_API_DATA: return updateObject(state, action);\r\n    case actionTypes.POST_API_DATA: return {\r\n      ...state,\r\n      postResponseData: action.payload,\r\n    };\r\n    default: return state;\r\n  }\r\n};\r\n\r\nexport default exampleReducer;\r\n","import { combineReducers, Reducer } from \"redux\";\r\nimport apiCallSaga from \"./sagas/apiCallSaga\";\r\nimport { fork, all } from \"redux-saga/effects\";\r\nimport exampleReducer from \"./reducer/exampleReducer\";\r\nimport { FakeDataModal } from \"./models/actionModel\";\r\n\r\nexport interface RootState {\r\n  // add models\r\n  homeData: FakeDataModal;\r\n}\r\n\r\nexport const createRootReducer = (): Reducer<any> =>\r\n  combineReducers({\r\n    // userDetails: userDetailsReducerFileImport\r\n    homeData: exampleReducer,\r\n  });\r\n\r\nexport function* rootSaga(): Generator {\r\n  yield all([fork(apiCallSaga)]);\r\n}\r\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport configureStore from './config/configureStore';\nimport { RootState } from './store';\n\nconst store = configureStore({} as RootState);\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { createStore, applyMiddleware, Store } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { RootState, createRootReducer, rootSaga } from 'src/store';\r\n\r\nexport default function configureStore(initialState: RootState): Store<RootState> {\r\n  // create the redux-saga middleware\r\n  const sagaMiddleware = createSagaMiddleware();\r\n\r\n  const store: Store = createStore(\r\n    createRootReducer(),\r\n    initialState,\r\n    applyMiddleware(sagaMiddleware),\r\n  );\r\n\r\n  // Don't forget to run the root saga, and return the store object.\r\n  sagaMiddleware.run(rootSaga);\r\n  return store;\r\n}\r\n"],"sourceRoot":""}